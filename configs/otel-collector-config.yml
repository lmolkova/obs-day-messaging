receivers:
  otlp:
    protocols:
      http:
        endpoint: "otelcollector:4318"
      grpc:
        endpoint: "otelcollector:4317"
  kafkametrics:
    brokers:
      - host.docker.internal:9092
      - host.docker.internal:9093
      - host.docker.internal:9094
    protocol_version: 2.0.0
    scrapers:
      - brokers
      - topics
      - consumers

  jmx/1:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: service:jmx:rmi:///jndi/rmi://host.docker.internal:9991/jmxrmi
    target_system: jvm,kafka
    collection_interval: 10s
    log_level: warn
    resource_attributes:
      service.name: broker1
  jmx/2:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: service:jmx:rmi:///jndi/rmi://host.docker.internal:9992/jmxrmi
    target_system: jvm,kafka
    collection_interval: 10s
    log_level: warn
    resource_attributes:
      service.name: broker2
  jmx/3:
    jar_path: /opt/opentelemetry-jmx-metrics.jar
    endpoint: service:jmx:rmi:///jndi/rmi://host.docker.internal:9993/jmxrmi
    target_system: jvm,kafka
    collection_interval: 10s
    log_level: warn
    resource_attributes:
      service.name: broker3

exporters:
  otlp:
    endpoint: jaeger:4317
    tls:
      insecure: true
  otlp/2:
    endpoint: aspire:18889
    tls:
      insecure: true

  otlphttp:
    metrics_endpoint: http://prometheus:9090/api/v1/otlp/v1/metrics
    tls:
      insecure: true

processors:
  batch:
  resourcedetection/docker:
    detectors: [env, docker]

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch, resourcedetection/docker]
      exporters: [otlp, otlp/2]
    metrics:
      receivers: [otlp, kafkametrics, jmx/1, jmx/2, jmx/3]
      processors: [batch, resourcedetection/docker]
      exporters: [otlp/2, otlphttp]
    logs:
      receivers: [otlp]
      processors: [batch, resourcedetection/docker]
      exporters: [otlp/2]
